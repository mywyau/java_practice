/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    // Apply the Spring Boot plugin
    id("org.springframework.boot") version "3.2.0"
    // Apply the Spring Dependency Management plugin
    id("io.spring.dependency-management") version "1.1.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Spring Boot Starter Web for building web applications, including RESTful services
    implementation("org.springframework.boot:spring-boot-starter-web")
    
    // Spring Boot Starter Test for testing Spring Boot applications
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "java_practice.App"
    // mainClass = "my_springboot.App"  // uncomment and run for other app
}

tasks.register("runJavaPracticeApp", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.App"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("runSpringBoot", JavaExec::class) {
    group = "application"
    mainClass = "springboot.App"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("arrayListsExamples", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.collections.ArrayListsExamples"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("forLoopExamples", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.basics.ForLoops"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("genericClasses", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.generics.GenericClasses"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("genericMethods", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.generics.GenericMethods"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("errorHandling", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.error_handling.ErrorHandling"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("enumExample1", JavaExec::class) {
    group = "application"
    mainClass = "java_practice.enums.EnumExample1"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("binaryTreeLevelOrder", JavaExec::class) {
    group = "application"
    mainClass = "dsa.BinaryTreeLevelOrder"
    classpath = sourceSets.main.get().runtimeClasspath
}


tasks.register<JavaExec>("runMain") {
    group = "application"
    description = "Run a main class by short name like: ./gradlew runMain -PmainClass=SetExample"

    doFirst {
        val shortName = project.findProperty("mainClass") as? String
            ?: throw GradleException("❌ Usage: ./gradlew runMain -PmainClass=SetExample")

        // You can manually map short names to FQCNs if needed
        val manualOverrides = mapOf(
            "BinaryTreeLevelOrder" to "dsa.BinaryTreeLevelOrder",
            "SetExample" to "java_practice.collections.SetExample",
            "GenericMethods" to "java_practice.generics.GenericMethods",
            "App" to "java_practice.App"
        )

        val fqcn = manualOverrides[shortName]
            ?: "java_practice.${shortName.replaceFirstChar { it.lowercase() }}.${shortName}"

        println("▶ Running class: $fqcn")

        mainClass.set(fqcn)
        classpath = sourceSets["main"].runtimeClasspath
    }
}


tasks.register<JavaExec>("runMainDsa") {
    group = "application"
    description = "Run a main class by short name like: ./gradlew runMainDsa -PmainClass=BinaryTreeLevelOrder"

    doFirst {
        val shortName = project.findProperty("mainClass") as? String
            ?: throw GradleException("❌ Usage: ./gradlew runMainDsa -PmainClass=BinaryTreeLevelOrder")

        // You can manually map short names to FQCNs if needed
        val manualOverrides = mapOf(
            "BinaryTreeLevelOrder" to "dsa.BinaryTreeLevelOrder",
            "App" to "dsa.App"
        )

        val fqcn = manualOverrides[shortName]
            ?: "dsa.${shortName.replaceFirstChar { it.lowercase() }}.${shortName}"

        println("▶ Running class: $fqcn")

        mainClass.set(fqcn)
        classpath = sourceSets["main"].runtimeClasspath
    }
}



tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}